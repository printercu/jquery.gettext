// Generated by CoffeeScript 1.6.2
/*
# gettext for jQuery
#
# Copyright (c) 2008 Sabin Iacob (m0n5t3r) <iacobs@m0n5t3r.info>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# @license http://www.gnu.org/licenses/gpl.html
# @project jquery.gettext
#
# Usage:
#
# This plugin expects its input data to be a JSON object like
# {"": header, "string": "translation", ...}
#
# After getting the server side set up (either as a static file - my choice - or
# as a web service), the client side is simple:
# add to the head section of the page something like
# <link href="path/to/translation.json" lang="ro" rel="gettext"/>
# in your script, use $.gt.gettext(string) or _(string); for plural forms, use
# $.gt.ngettext(sg, pl1[, pl2, ...], count) or n_(sg, pl1[, pl2, ...], count)
# to extract strings to a .po file, you can use standard gettext utilities like
# xgettext and msgfmt; to generate the JSON, one could use the following Python
# snippet, assuming a domain.mo file exists under path/lang/LC_MESSAGES:
#
# import simplejson as enc
#
# def gettext_json(domain, path, lang = [], indent = False):
# try:
# tr = gettext.translation(domain, path, lang)
# return enc.dumps(tr._catalog, ensure_ascii = False, indent = indent)
# except IOError:
# return None
#
# why go through the additional hassle of gettext? well, it's a matter of
# preference, the main advantags I see are:
# well known editing tools like KBabel, poEdit, gtranslator, Emacs PO mode,
# etc.
# translation memory, fuzzy matches and other features that get really
# helpful when your application is big and you have hundreds of strings
*/


(function() {
  var Gettext, RE_PLURAL, isArray,
    __slice = [].slice;

  RE_PLURAL = /^Plural-Forms:\s*nplurals\s*=\s*(\d+);\s*plural\s*=\s*([^a-zA-Z0-9\$]*([a-zA-Z0-9\$]+).+)$/m;

  isArray = function(obj) {
    return typeof obj === 'object' && obj.constructor === Array;
  };

  Gettext = (function() {
    Gettext.interpolate = function(str, lang) {
      return str.replace(/:lang/g, lang);
    };

    Gettext.ajaxPath = '/locale/:lang/LC_MESSAGES/default.json';

    Gettext.ajaxLoad = function(file, success, error) {
      var xhr;

      xhr = jQuery.getJSON(file, function(data) {
        var gt;

        gt = new Gettext(data);
        return success != null ? success.call(this, gt) : void 0;
      });
      if (error) {
        xhr.error(error);
      }
      return xhr;
    };

    Gettext.ajaxLoadLang = function() {
      var args, lang;

      lang = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.ajaxLoad.apply(this, [this.interpolate(this.ajaxPath, lang)].concat(__slice.call(args)));
    };

    Gettext.fsPath = '';

    Gettext.loadFile = function(file, callback) {
      var _this = this;

      return require('fs').readFile(file, function(err, json) {
        var data, e;

        if (err) {
          return callback(err);
        }
        try {
          data = JSON.parse(json);
        } catch (_error) {
          e = _error;
          return callback(e);
        }
        return callback(null, new _this(data));
      });
    };

    Gettext.loadLangFile = function(lang, callback) {
      return this.loadFile(this.interpolate(this.fsPath, lang), callback);
    };

    Gettext.loadFileSync = function(file) {
      return new this(JSON.parse(require('fs').readFileSync(file)));
    };

    Gettext.loadLangFileSync = function(lang) {
      return this.loadFileSync(this.interpolate(this.fsPath, lang));
    };

    function Gettext(messages) {
      var expr, np, pl, v;

      this.messages = messages != null ? messages : {};
      pl = RE_PLURAL.exec(this.messages[""]);
      if (pl) {
        np = pl[1];
        expr = pl[2];
        v = pl[3];
        try {
          this.plural = eval("(function(" + v + ") {return " + expr + ";})");
        } catch (_error) {}
      }
    }

    Gettext.prototype.plural = function(n) {
      return n !== 1;
    };

    Gettext.prototype.gettext = function(msgstr) {
      var trans;

      trans = this.messages[msgstr];
      if (typeof trans === 'string') {
        return trans;
      }
      if (isArray(trans)) {
        return trans[0];
      }
      return msgstr;
    };

    Gettext.prototype.ngettext = function() {
      var cnt, pl, pls, sg, trans, _i, _ref;

      pls = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cnt = arguments[_i++];
      sg = pls[0];
      trans = (_ref = this.messages[sg]) != null ? _ref : pls;
      if (typeof trans === 'string') {
        return trans;
      }
      if (isArray(trans)) {
        pl = this.plural(cnt);
        if (typeof pl === 'boolean' && pls.length === 2) {
          pl = (pl ? 1 : 0);
        }
        if (typeof pl === 'number' && pl < trans.length) {
          return trans[pl];
        }
      }
      return sg;
    };

    return Gettext;

  })();

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = Gettext;
  }

  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jQuery.Gettext = Gettext;
    jQuery.gt = new Gettext();
  }

}).call(this);
